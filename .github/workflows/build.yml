name: build
on:
  push:
    tags:
      - v*
jobs:
  build:
    name: Build
    strategy:
      matrix:
        build:
          - os: macos-latest
            path: target/release/nk
            artifact: nk-macos-x86_64
          - os: macos-latest
            path: target/aarch64-apple-darwin/release/nk
            artifact: nk-macos-aarch64
          - os: ubuntu-latest
            path: target/x86_64-unknown-linux-musl/release/nk
            artifact: nk-linux-x86_64
          - os: windows-latest
            path: target/release/nk.exe
            artifact: nk-windows-x86_64.exe
          # TODO: aarch64-pc-windows-msvc
    runs-on: ${{ matrix.build.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup musl
        run: |
          rustup target add x86_64-unknown-linux-musl
          sudo apt-get install -y musl-tools
        if: runner.os == 'Linux'
      - name: Setup Apple Silicon
        run: |
          rustup target add aarch64-apple-darwin
        if: matrix.build.artifact == 'nk-macos-aarch64'
      - uses: Swatinem/rust-cache@v2
      - name: Build # Linux
        env:
          LDFLAGS: -Wl,--copy-dt-needed-entries
          RUSTFLAGS: -C target-feature=+crt-static
        run: cargo build --release --target x86_64-unknown-linux-musl
        if: runner.os == 'Linux'
      - name: Build # Apple Silicon
        run: cargo build --release --target=aarch64-apple-darwin
        if: matrix.build.artifact == 'nk-macos-aarch64'
      - name: Build
        run: cargo build --release
        if: runner.os != 'Linux' && matrix.build.artifact != 'nk-macos-aarch64'
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build.artifact }}
          path: ${{ matrix.build.path }}
  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create Release
        env:
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir assets

          # move binaries to assets directory
          for path in artifacts/*; do
            declare artifact="$(basename "$path")"
            mv "${path}/nk"* "assets/${artifact}"
          done

          # create release
          gh release create \
            --title "$GITHUB_REF_NAME" \
            --notes '' \
            "$GITHUB_REF_NAME" \
            "assets/"*
